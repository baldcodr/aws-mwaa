AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to deploy Managed Workflows for Apache Airflow (MWAA) with GitHub PR trigger.

Parameters:
  GithubRepo:
    Type: String
    Description: GitHub repository name
    Default: aws-mwaa
  GithubRepoOwner:
    Type: String
    Description: GitHub repository owner
    Default: baldcodr
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to trigger on PR merge
  GitHubConnectionArn:
    Type: String
    Description: 'ARN of the GitHub Connection'
  DAGsS3Bucket:
    Type: String
    Description: Name of the S3 bucket to store DAGs
    Default: aws-mwaa-dags-


Resources:
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonMWAAGlueRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - sagemaker.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerCanvasFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerCanvasDataPrepFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodePipelineRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeStarServiceRole
      Policies:
        - PolicyName: CodePipelineS3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${DAGsS3Bucket}/*"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "MWAA-Pipeline-${AWS::StackName}"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref DAGsS3Bucket
      Stages:
        - Name: Source
          Actions:
          - Name: GitHubSource
            RunOrder: 1
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: "1"
              Provider: CodeStarSourceConnection
            Configuration:
              ConnectionArn: !Ref GitHubConnectionArn
              DetectChanges: true
              FullRepositoryId: !Sub "${GithubRepoOwner}/${GithubRepo}"
              BranchName: !Ref GitHubBranch
              OutputArtifactFormat: "CODE_ZIP"
            OutputArtifacts:
              - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name: DeployToS3
              RunOrder: 2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Ref DAGsS3Bucket
                Extract: "true"
              InputArtifacts:
                - Name: SourceOutput